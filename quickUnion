//same as quickunion but weighted. Has extra array sz to keep count the number of objects in the tree rooted at i.
// Depth on any node at x is at most lg N
public class QuickUnionWeightedUF {
	
		private int[] id;
		private int[] sz;

		//set id of each object to itself (N array accesses)
		public QuickUnionWeightedUF(int N){
			id = new int[N];
			for(int i = 0; i < N; i++){
				id[i] = i;
			}
		}

		// chase parent pointers until reach root(depth of i array accesses)
		private int root(int i){
			while (i != id[i]){
				i = id[id[i]];  //makes every other node in path point to its grandparent (halving path length)
			}
			return i;
		}

		//check if p and q have same root(depth of p and q array accesses)
		public boolean connected(int p, int q){
			return root(p)  == root(q);
		}

		//change root of p to point to root of q (depth of p and q array accesses)
		//link root of smaller tree to root of larger tree and update sz array size
		public void union(int p, int q){
			int i = root(p);
			int j = root(q);
			if(i == j) return;
			if (sz[i] < sz[j]){
				id[i]=j; sz[j]+= sz[i];
				}else{
			id [j] = i; sz[i] += sz[j];}
		}
		}

